import com.android.build.api.transform.*
import com.android.build.api.transform.QualifiedContent.ContentType
import com.android.build.api.transform.QualifiedContent.Scope
import com.android.build.gradle.api.ApplicationVariant
import com.google.common.collect.Sets
import groovy.xml.XmlUtil
import org.apache.commons.io.FileUtils

// 对应的plugin类是AppPlugin
apply plugin: 'com.android.application'
apply plugin: AssetPlugin
apply plugin: TransformPlugin
apply plugin: 'com.sososeen09.dexbuild'
//apply plugin: DexPlugin

// android 对应的是AppExtension
android {
    compileSdkVersion 26

    defaultConfig {
        applicationId "com.sososeen09.multidexbuild"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    dexOptions {
        preDexLibraries = false
        additionalParameters = ["--minimal-main-dex"]
    }

    signingConfigs {
        config {
            keyAlias 'demo'
            keyPassword "123456"
            storeFile file('../demo.jks')
            storePassword "123456"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

//multidex打包过程 自定义存放在muldex的配置对应的API是 DexProcessBuilder
//project.afterEvaluate {
//    project.tasks.matching {
//        logger.quiet("dex task name: " + it.name)
//        it.name.startsWith("dex")
//    }.each { dx ->
//        logger.quiet("dex mathched task: " + dx)
//        def maindexlistfile = project.rootDir.absolutePath+"/multidexbuild/maindexlist.txt"
//        if (dx.additionalParameters == null) {
//            dx.additionalParameters = []
//        }
//        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
//        dx.additionalParameters += '--multi-dex'
//        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
//        dx.additionalParameters += '--main-dex-list=' + maindexlistfile
//        //表明只有-main-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
//        dx.additionalParameters += '--minimal-main-dex'
//    }
//}

// 打包的时候往assets中添加资源
//project.afterEvaluate {
//    android.applicationVariants.each { ApplicationVariant variant ->
//        String variantName = variant.name.capitalize()
//        def packageTask = project.tasks.getByName("package${variantName}")
//        logger.quiet("packageTask: " + packageTask.class)
//        packageTask.doFirst {
//            project.copy { param ->
//                from "/works/gradleStudy/AndroidGradleStudy/Gradle.pdf"
//                into "${packageTask.assets}"
//                logger.quiet("itAssets: " + packageTask.class)
//            }
//        }
//    }
//}

//过滤variant
android.variantFilter { variant ->
    if (variant.buildType.name == 'release') {
        variant.flavors.each { flavor ->
            if (flavor.name == 'blue') {
                variant.ignore = true
            }
        }
    }
}

project.afterEvaluate {
    android.applicationVariants.each { ApplicationVariant variant ->
        String variantName = variant.name.capitalize()
        //对应的API 是ProcessManifest这个类，继承自ManifestProcessorTask
        def processManifestTask = project.tasks.getByName("process${variantName}Manifest")
        logger.quiet("processManifestTask: " + processManifestTask.class)
        processManifestTask.doLast { mm ->
            logger.quiet("doLast: " + mm)
            logger.quiet("doLast: " + it)
            if (project.hasProperty("channel")) {
                //在2.3的时候还支持这个
//                addChannel(processManifestTask.manifestOutputFile)
                //在3.0以上，已经不支持使用manifestOutputFile了具体可以查看ManifestProcessorTask这个类，3.0使用manifestOutputDirectory
                addChannel(processManifestTask.manifestOutputDirectory)
            }
        }
    }
}

//project.afterEvaluate {
//    android.applicationVariants.each { ApplicationVariant variant ->
//        String variantName = variant.name.capitalize()
//        project.tasks.names.each {
//            logger.quiet("${variantName} taskName: " + it)
//        }
//    }
//}


def addChannel(File manifestOutputFile) {
    if (manifestOutputFile) {
        def channelValue = project.property("channel")
        def xml = new XmlParser().parse(manifestOutputFile)
        xml.application[0].appendNode("meta-data", ["android:name": "channel", "android:value": channelValue])
        manifestOutputFile.withPrintWriter("UTF-8") {
            XmlUtil.serialize(xml, it)
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

class DexPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.afterEvaluate {
            project.android.applicationVariants.each { ApplicationVariant variant ->
                String variantName = variant.name.capitalize()
                //transformClassesWithDexForRelease
//              transformClassesWithDexBuilderForDebug
                if (variantName.contains("Release")) {
                    try {
                        def transformDexTask = project.tasks.getByName("transformClassesWithDexFor${variantName}")
                        if (transformDexTask != null) {
                            project.logger.error("transformDexTask: " + transformDexTask.class)
                        }
                    } catch (UnknownTaskException e) {
                        project.logger.error("UnknownTaskException: " + e.getMessage())
                    }
                }
                if (variantName.contains("Debug")) {
                    try {
                        def transformDexTask = project.tasks.getByName("transformClassesWithDexBuilderFor${variantName}")
                        if (transformDexTask != null) {
                            project.logger.error("transformDexBuilderTask: " + transformDexTask.class)
                        }
                    } catch (UnknownTaskException e) {
                        project.logger.error("UnknownTaskException: " + e.getMessage())
                    }
                }

                //transformClassesWithMultidexlistForRelease
                try {
                    def transformDexTask = project.tasks.getByName("transformClassesWithMultidexlistFor${variantName}")
                    if (transformDexTask != null) {
                        project.logger.error("transformClassesWithMultidexlistTask: " + transformDexTask.class)
                    }
                } catch (UnknownTaskException e) {
                    project.logger.error("UnknownTaskException: " + e.getMessage())
                }
            }
        }
    }
}

class AssetPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.afterEvaluate {
            project.android.applicationVariants.each { ApplicationVariant variant ->
                String variantName = variant.name.capitalize()
                def packageTask = project.tasks.getByName("package${variantName}")
                project.logger.quiet("packageTask: " + packageTask.class)
                project.logger.quiet("packageTask assets path: " + packageTask.assets.asPath)
                packageTask.doFirst {
                    project.copy { param ->
                        from "../multidexbuild/assets"
                        //很坑的一点是，2.3.3下是packageTask.assets，到3.0就变成packageTask.assets.asPath
                        into "${packageTask.assets.asPath}"
                    }
                }
            }
        }
    }
}

class TransformPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.logger.error("==================")
        project.logger.error("my transform start")
        project.logger.error("==================")
//        project.android.registerTransform(new ClassTransform(project))
    }
}

class ClassTransform extends Transform {
    Project project

    ClassTransform(Project project) {    // 构造函数，我们将Project保存下来备用
        this.project = project
    }

    @Override
    String getName() {
        //这个返回的名字就是会在编译过程中 生成目录 ./build/intermediates/transforms/classTransform
        return "classTransform"
    }

    // 指定输入的类型，通过这里的设定，可以指定我们要处理的文件类型这样确保其他类型的文件不会传入
    @Override
    Set<ContentType> getInputTypes() {
        return Sets.immutableEnumSet(QualifiedContent.DefaultContentType.CLASSES)
    }

    // 指定Transform的作用范围
    @Override
    Set<? super Scope> getScopes() {
        return Sets.immutableEnumSet(Scope.PROJECT, Scope.PROJECT_LOCAL_DEPS,
                Scope.SUB_PROJECTS, Scope.SUB_PROJECTS_LOCAL_DEPS,
                Scope.EXTERNAL_LIBRARIES)
    }

    @Override
    boolean isIncremental() {
        return false
    }

    @Override
    void transform(Context context, Collection<TransformInput> inputs,
                   Collection<TransformInput> referencedInputs,
                   TransformOutputProvider outputProvider, boolean isIncremental)
            throws IOException, TransformException, InterruptedException {

        def startTime = System.currentTimeMillis()
        project.logger.error("ClassTransform isIncremental: " + isIncremental)
        if (!isIncremental) {
            outputProvider.deleteAll()
        }
        // Transform的inputs有两种类型，一种是目录，一种是jar包，要分开遍历
        inputs.each { TransformInput input ->
            try {
                input.jarInputs.each {
                    String outputFileName = it.name.replace(".jar", "") + '-' + it.file.path.hashCode()
                    def output = outputProvider.getContentLocation(outputFileName, it.contentTypes, it.scopes, Format.JAR)
                    project.logger.error("outputProvider input: " + it.file.absolutePath)
                    project.logger.error("outputProvider output: " + output.absolutePath)
                    FileUtils.copyFile(it.file, output)
                }
            } catch (Exception e) {
                project.logger.error("ClassTransform error: " + e.getMessage())
            }
            //对类型为“文件夹”的input进行遍历
            try {
                input.directoryInputs.each { DirectoryInput directoryInput ->
                    // 获取output目录
                    def dest = outputProvider.getContentLocation(directoryInput.name,
                            directoryInput.contentTypes, directoryInput.scopes,
                            Format.DIRECTORY)

                    // 将input的目录复制到output指定目录
                    FileUtils.copyDirectory(directoryInput.file, dest)
                    project.logger.error("outputProvider folder input: " + directoryInput.file.absolutePath)
                    project.logger.error("outputProvider folder output: " + dest.absolutePath)
                }
            } catch (Exception e) {
                project.logger.error("ClassTransform error: " + e.getMessage())
            }
        }

        this.project.logger.error("ClassTransform transform method cost: ${(System.currentTimeMillis() - startTime) / 1000}  secs")
    }
}